diff --git a/fftools/ffplay.c b/fftools/ffplay.c
index 9f7774613c..12888616c3 100644
--- a/fftools/ffplay.c
+++ b/fftools/ffplay.c
@@ -30,6 +30,9 @@
 #include <signal.h>
 #include <stdint.h>
 
+/* Video Metrics / INF / UFRGS / Iulisloi Zacarias */
+#include <time.h>
+
 #include "libavutil/avstring.h"
 #include "libavutil/eval.h"
 #include "libavutil/mathematics.h"
@@ -388,6 +391,17 @@ static const struct TextureFormatEntry {
     { AV_PIX_FMT_NONE,           SDL_PIXELFORMAT_UNKNOWN },
 };
 
+/* Video Metrics / INF / UFRGS / Iulisloi Zacarias */
+static int vstall_stalled = 0;
+static clock_t vstall_start_time = 0;
+static clock_t vstall_end_time = 0;
+static int vstall_count = 0;
+static float vstall_total_time = 0;
+
+static int vinit_initializing = 1;
+static clock_t vinit_start_time = 0;
+static float vinit_total_time = 0;
+
 #if CONFIG_AVFILTER
 static int opt_add_vfilter(void *optctx, const char *opt, const char *arg)
 {
@@ -1291,6 +1305,9 @@ static void do_exit(VideoState *is)
     if (show_status)
         printf("\n");
     SDL_Quit();
+    av_log(NULL, AV_LOG_INFO, 
+           "UFRGS Metrics: init_time=%f; stall_count=%d; stall_time=%f \n",
+           vinit_total_time, vstall_count, vstall_total_time);
     av_log(NULL, AV_LOG_QUIET, "%s", "");
     exit(0);
 }
@@ -1587,7 +1604,7 @@ static void video_refresh(void *opaque, double *remaining_time)
     if (!display_disable && is->show_mode != SHOW_MODE_VIDEO && is->audio_st) {
         time = av_gettime_relative() / 1000000.0;
         if (is->force_refresh || is->last_vis_time + rdftspeed < time) {
-            video_display(is);
+            // video_display(is);
             is->last_vis_time = time;
         }
         *remaining_time = FFMIN(*remaining_time, is->last_vis_time + rdftspeed - time);
@@ -1597,10 +1614,49 @@ static void video_refresh(void *opaque, double *remaining_time)
 retry:
         if (frame_queue_nb_remaining(&is->pictq) == 0) {
             // nothing to do, no picture to display in the queue
+
+            /* Video Metrics / INF / UFRGS / Iulisloi Zacarias */
+            /* if there is no frame to display, the video is stalled */
+
+            /* Only count stall if not already stalled, not initializing and time is grather than 0 */
+            if (!vstall_stalled && !vinit_initializing && (get_master_clock(is) > 0.0)) {
+                vstall_stalled = 1;
+                vstall_count = vstall_count + 1;
+                vstall_start_time = clock();
+                av_log(NULL, AV_LOG_INFO, "UFRGS: Video stalled! No frames in queue. \n");
+            }
+
         } else {
             double last_duration, duration, delay;
             Frame *vp, *lastvp;
 
+            /* Video Metrics / INF / UFRGS / Iulisloi Zacarias */
+            if (vinit_initializing)
+            {
+                /* Video still initializing, do not count stalls! */
+                /* If video current time if not "0", it is already initialized */
+                if (get_master_clock(is) > 0.0){
+                    /* Getting the start time of stream AppQoE */
+                    vinit_initializing = 0;
+                    clock_t vinit_current_time = clock();
+                    vinit_total_time = 
+                        ((float)(vinit_current_time - vinit_start_time) / 1000000.0F ) * 1000;
+                    av_log(NULL, AV_LOG_INFO, "UFRGS: Video initialized! Init_time=%f \n", vinit_total_time);
+                }
+            } else {
+                /* Video already initialized, count the number or stalls
+                /* Getting information about stalls and stall time */
+                if (vstall_stalled && !vinit_initializing){
+                    vstall_stalled = 0;
+                    vstall_end_time = clock();
+                    float vstall_time_stalled = 
+                          ((float)(vstall_end_time - vstall_start_time) / 1000000.0F ) * 1000;
+                    vstall_total_time = vstall_total_time + vstall_time_stalled;
+                    av_log(NULL, AV_LOG_INFO, "UFRGS: Recover from stall!. Stall_time=%f Stall_count=%d \n", 
+                           vstall_time_stalled, vstall_count);
+                }
+            }
+
             /* dequeue the picture */
             lastvp = frame_queue_peek_last(&is->pictq);
             vp = frame_queue_peek(&is->pictq);
@@ -1688,7 +1744,7 @@ retry:
 display:
         /* display picture */
         if (!display_disable && is->force_refresh && is->show_mode == SHOW_MODE_VIDEO && is->pictq.rindex_shown)
-            video_display(is);
+            // video_display(is);
     }
     is->force_refresh = 0;
     if (show_status) {
@@ -3266,6 +3322,9 @@ static void event_loop(VideoState *cur_stream)
     SDL_Event event;
     double incr, pos, frac;
 
+    /* Video Metrics / INF / UFRGS / Iulisloi Zacarias */
+    vinit_start_time = clock();
+
     for (;;) {
         double x;
         refresh_loop_wait_event(cur_stream, &event);
@@ -3709,6 +3768,11 @@ int main(int argc, char **argv)
     signal(SIGTERM, sigterm_handler); /* Termination (ANSI).  */
 
     show_banner(argc, argv, options);
+    av_log(NULL, AV_LOG_INFO, "This is a modified version of software ffplay in order\n");
+    av_log(NULL, AV_LOG_INFO, "to collect AppQoE metrics during video playing. \n");
+    av_log(NULL, AV_LOG_INFO, "These changes were made at: \n");
+    av_log(NULL, AV_LOG_INFO, "    Federal University of Rio Grande do Sul \n");
+    av_log(NULL, AV_LOG_INFO, "    Institute of Informatics. \n");
 
     parse_options(NULL, argc, argv, options, opt_input_file);
 
